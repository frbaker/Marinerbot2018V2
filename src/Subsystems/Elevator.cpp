// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <iostream>
#include <string>
#include "ctre/Phoenix.h"
#include "Elevator.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Elevator::Elevator() : frc::Subsystem("Elevator") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevatorTalon = RobotMap::elevatorElevatorTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    joyValue = 0;
}

void Elevator::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	elevatorTalon->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, 0, 10);

}

void Elevator::Periodic() {


}


// Put methods for controlling this subsystem
// here. Call these from Commands.

int Elevator::GetElPosition(){
	int elevatorEncoderPosition = elevatorTalon->GetSelectedSensorPosition(0);
	std::cout 	<< "Elevator encoder position is: " << elevatorEncoderPosition << std::endl;
	return elevatorEncoderPosition;
}

void Elevator::SetElPositionToZero(){
	elevatorTalon->SetSelectedSensorPosition(0,0,0);
}

void Elevator::RaiseElevator(){
	elevatorTalon->Set(1.0);

}
void Elevator::LowerElevator(){
	elevatorTalon->Set(-1.0);
}
void Elevator::ElevatorStop(){

	//elevatorTalon->SetNeutralMode(com.ctre.phoenix.motorcontrol.NeutralMode.Brake);
	elevatorTalon->Set(0);
	//elevatorTalon->StopMotor();
}
void Elevator::TakeJoy(double joyValue){
	elevatorTalon->Set(joyValue);
}
