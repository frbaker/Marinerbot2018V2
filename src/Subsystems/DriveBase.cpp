// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <iostream>
#include <string>
#include "ctre/Phoenix.h"


#include "DriveBase.h"
#include "../RobotMap.h"
#include "Commands/DriveWithJoy.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveBase::DriveBase() : frc::Subsystem("DriveBase") {
driveTrainLeftTalonSlave = RobotMap::driveBaseDriveTrainLeftTalonSlave;
driveTrainRightTalonSlave = RobotMap::driveBaseDriveTrainRightTalonSlave;
	ahrs = new AHRS(SerialPort::Port::kMXP);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    driveTrainLeftTalon = RobotMap::driveBaseDriveTrainLeftTalon;
    driveTrainRightTalon = RobotMap::driveBaseDriveTrainRightTalon;
    driveTrain = RobotMap::driveBaseDriveTrain;
    gyro = RobotMap::driveBaseGyro;
    ultrasonicLeft = RobotMap::driveBaseUltrasonicLeft;
    ultrasonicRight = RobotMap::driveBaseUltrasonicRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    driveBackSpeed = -1.0;
    driveStraightSpeed = 1.0;
    distanceToLeftObject = 0;
}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoy());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	driveTrainLeftTalonSlave->Follow(*driveTrainLeftTalon);
	driveTrainRightTalonSlave->Follow(*driveTrainRightTalon);

	//Left DriveTrain
	driveTrainLeftTalon->SetInverted(true);
	driveTrainLeftTalonSlave->SetInverted(true);

	//Right DriveTrain
	driveTrainRightTalon->SetInverted(true);
	driveTrainRightTalonSlave->SetInverted(true);

	driveTrainLeftTalon->SetSensorPhase(true);
	driveTrainRightTalon->SetSensorPhase(true);
}

void DriveBase::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveBase::resetAhrs(){
	ahrs->ZeroYaw();
}
double DriveBase::getCurrentAngle(){
	return ahrs->GetAngle();
}

double DriveBase::getInchesToObject(){
	//Todo Need to verify this returns distance to the nearest object in inches.
	double voltage = ultrasonicLeft->GetAverageVoltage();
	double dist_mm = voltage/0.977*1000;
	double dist_in = dist_mm/25.4;
	//double dist_in = ultrasonicLeft->GetRangeInches();
	return dist_in;
}


void DriveBase::driveSetDistance(double dist){
	double destination = getInchesToObject()+dist;
	Timer t;
	double startAngle = getCurrentAngle();
	const double k = 0.01;
	double angleAdjustment;
	t.Start();
	if (dist >= 0){
		while (getInchesToObject() < destination){
			std::cout 	<< "Inches to travel: " << getInchesToObject() << std::endl;
			angleAdjustment = getCurrentAngle()-startAngle;
			driveTrain->TankDrive(0.5-k*angleAdjustment,0.5+k*angleAdjustment);
			if (t.Get() > 7 ){ //Sanity check ... if the command has taken more the 7 seconds something is seriously wrong.
				break;
			}
		}
	}
	else {
		while (getInchesToObject() > destination){
			std::cout 	<< "Inches to back: " << getInchesToObject() << std::endl;
			angleAdjustment = getCurrentAngle()-startAngle;
			driveTrain->TankDrive(0.5-k*angleAdjustment,-0.5+k*angleAdjustment);
			if (t.Get() > 7){ //Sanity check
				break;
			}
		}
	}
	Halt();
}

void DriveBase::turnToAngle(double degree){
	double c = getCurrentAngle();

	std::cout 	<< "Current Angle is: " << c << std::endl;

	double e;
	Timer t;
	t.Start();
	e=c+degree;
	if (degree>=0){
		while(getCurrentAngle() < e){
			driveTrain->TankDrive(0.4,-0.4);
			if (t.Get() > 5){ //Sanity check - if turning takes more than 5 seconds there is something wrong.
				break;
			}
		}
	}
	else {
		while (getCurrentAngle() > e){
			driveTrain->TankDrive(-0.4,0.4);
			if (t.Get() > 5){ //Sanity check.
				break;
			}
		}
	}
}

void DriveBase::DriveStraight(double driveStraightSpeed){
	driveTrain->TankDrive(driveStraightSpeed, driveStraightSpeed);
}

void DriveBase::DriveBack(double driveBackSpeed){
	driveTrain->TankDrive(driveBackSpeed, driveBackSpeed);
}

void DriveBase::Halt(){
		driveTrain->TankDrive(0.0,0.0);
}
void DriveBase::JoyDrive(double myX, double myY){
	//driveTrain->ArcadeDrive(myX, myY);
	driveTrain->TankDrive(myX,myY);
}

