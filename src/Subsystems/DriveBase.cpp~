// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <iostream>
#include <string>
#include "ctre/Phoenix.h"


#include "DriveBase.h"
#include "../RobotMap.h"
#include "Commands/DriveWithJoy.h"

DriveBase::DriveBase() : frc::Subsystem("DriveBase") {
driveTrainLeftTalonSlave = RobotMap::driveBaseDriveTrainLeftTalonSlave;
driveTrainRightTalonSlave = RobotMap::driveBaseDriveTrainRightTalonSlave;

	//ahrs = new AHRS(SerialPort::Port::kMXP);
    driveTrainLeftTalon = RobotMap::driveBaseDriveTrainLeftTalon;
    driveTrainRightTalon = RobotMap::driveBaseDriveTrainRightTalon;
    driveTrain = RobotMap::driveBaseDriveTrain;
    //gyro = RobotMap::driveBaseGyro;
    //ultrasonicLeft = RobotMap::driveBaseUltrasonicLeft;
    //ultrasonicRight = RobotMap::driveBaseUltrasonicRight;


    driveBackSpeed = -1.0;
    driveStraightSpeed = 1.0;
    distanceToLeftObject = 0;

   // PigionIMU * _pidgey;


}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());

        SetDefaultCommand(new DriveWithJoy());


	driveTrainLeftTalonSlave->Follow(*driveTrainLeftTalon);
	driveTrainRightTalonSlave->Follow(*driveTrainRightTalon);

	//Left DriveTrain
	driveTrainLeftTalon->SetInverted(true);
	driveTrainLeftTalonSlave->SetInverted(true);

	//Right DriveTrain
	driveTrainRightTalon->SetInverted(true);
	driveTrainRightTalonSlave->SetInverted(true);

	driveTrainLeftTalon->SetSensorPhase(true);
	driveTrainRightTalon->SetSensorPhase(true); //set to true multiplies result by -1 to reverse the reading




	//ahrs = new AHRS(I2C::kOnboard, 0); //to use I2C

	//ahrs = new AHRS(SerialPort::kUSB1);


}

void DriveBase::Periodic() {

    // Put code here to be run every loop
	//std::cout 	<< "left speed is : " << leftspeed << std::endl;
	//std::cout 	<< "right speed is : " << rightspeed << std::endl;
}

void DriveBase::PrintEncoderSpeed(){
	int leftpos = driveTrainLeftTalon->GetSelectedSensorPosition(0);
	double dir = getCurrentAngle();
	//int rightpos = driveTrainRightTalon->GetSelectedSensorPosition(1);
	//int gyroangle = ahrs->GetAngle();
	//double frontultrasonic = getInchesToObject();
	//double backultrasonic = ultrasonicRight->GetAverageVoltage();
	int elpos = Robot::elevator->GetElPosition();

	std::cout 	<< "left pos is : " << leftpos << std::endl;

	std::cout 	<< "dir : " << dir << std::endl;
	//std::cout 	<< "gyro angle is : " << gyroangle << std::endl;
	//std::cout 	<< "front ultrasonic distance : " << frontultrasonic << std::endl;
	//std::cout 	<< "back ultrasonic voltage : " << backultrasonic << std::endl;
	std::cout 	<< "elevator position : " << elpos << std::endl;
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveBase::resetAhrs(){
	//ahrs->ZeroYaw();
	//_pidgey->SetFusedHeading(0.0, 10); /* reset heading, angle measurement wraps at plus/minus 23,040 degrees (64 rotations) */

}
double DriveBase::getCurrentAngle(){
    PigeonIMU * piggy;
    piggy = new PigeonIMU(0);
   //piggy->GetFusedHeading();
    return piggy->GetFusedHeading();
    //return 0.0;
}

double DriveBase::getCurrentEncoderPos(){
	double encoderReading = driveTrainLeftTalon->GetSelectedSensorPosition(0);
	return encoderReading * 1275.135; //converts the reading to inches
	//return driveTrainLeftTalon->GetSelectedSensorPosition(0);
}

double DriveBase::getInchesToObject(){
	//Todo Need to verify this returns distance to the nearest object in inches.
	double voltage = ultrasonicLeft->GetAverageVoltage();
	double dist_mm = voltage/0.977*1000;
	double dist_in = dist_mm/25.4;
	//double dist_in = ultrasonicLeft->GetRangeInches();
	return dist_in;
}


void DriveBase::driveSetDistance(double dist){
	double destination = dist;
	Timer t;
	double startAngle = getCurrentAngle();
	const double k = 0.01;
	double angleAdjustment;
	t.Start();

	while (getCurrentEncoderPos() < destination){
		angleAdjustment = getCurrentAngle()-startAngle;
		driveTrain->TankDrive(0.50-k*angleAdjustment,0.50+k*angleAdjustment);
		if (t.Get() > 7 ){ //Sanity check ... if the command has taken more the 7 seconds something is seriously wrong.
			break;
		}
	}
	Halt();
}


void DriveBase::driveBackSetDistance(double dist){
	double destination = dist;
	Timer t;
	double startAngle = getCurrentAngle();
	const double k = 0.01;
	double angleAdjustment;
	t.Start();

	while (getCurrentEncoderPos() < destination){
		angleAdjustment = getCurrentAngle()-startAngle;
		driveTrain->TankDrive(-0.5-k*angleAdjustment,-0.5+k*angleAdjustment);
		if (t.Get() > 7 ){ //Sanity check ... if the command has taken more the 7 seconds something is seriously wrong.
			break;
		}
	}
	Halt();
}

void DriveBase::turnToAngle(double degree){
	double c = getCurrentAngle();

	//std::cout 	<< "Current Angle is: " << c << std::endl;

	double e;
	Timer t;
	t.Start();
	e=c+degree;
	if (degree>=0){
		while(getCurrentAngle() < e){
			driveTrain->TankDrive(0.6,-0.6);
			if (t.Get() > 5){ //Sanity check - if turning takes more than 5 seconds there is something wrong.
				break;
			}
		}
	}
	else {
		while (getCurrentAngle() > e){
			driveTrain->TankDrive(-0.6,0.6);
			if (t.Get() > 5){ //Sanity check.
				break;
			}
		}
	}
}

void DriveBase::DriveStraight(double driveStraightSpeed){
	driveTrain->TankDrive(driveStraightSpeed, driveStraightSpeed);
}

void DriveBase::DriveBack(double driveBackSpeed){
	driveTrain->TankDrive(driveBackSpeed, driveBackSpeed);
}

void DriveBase::Halt(){
		driveTrain->TankDrive(0.0,0.0);
}
void DriveBase::JoyDrive(double myX, double myY){
	//driveTrain->ArcadeDrive(myX, myY);
	driveTrain->TankDrive(myX,myY);
}

