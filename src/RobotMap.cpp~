// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseDriveTrainLeftTalonSlave;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseDriveTrainRightTalonSlave;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseDriveTrainLeftTalon;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseDriveTrainRightTalon;
std::shared_ptr<frc::DifferentialDrive> RobotMap::driveBaseDriveTrain;
std::shared_ptr<frc::AnalogGyro> RobotMap::driveBaseGyro;
std::shared_ptr<frc::AnalogInput> RobotMap::driveBaseUltrasonicLeft;
std::shared_ptr<frc::AnalogInput> RobotMap::driveBaseUltrasonicRight;
std::shared_ptr<WPI_TalonSRX> RobotMap::elevatorElevatorTalon;
std::shared_ptr<frc::SpeedController> RobotMap::elbowElbowSpark;
std::shared_ptr<frc::DigitalInput> RobotMap::elbowElbowTopLimit;
std::shared_ptr<frc::DigitalInput> RobotMap::elbowElbowBottomLimit;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::grabberGrabberSolenoid;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::shifterShifterSolenoid;
std::shared_ptr<frc::SpeedController> RobotMap::climberClimberSpark;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::elBrakeElBrakeSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveBaseDriveTrainLeftTalon.reset(new WPI_TalonSRX(0));
    
    
    driveBaseDriveTrainRightTalon.reset(new WPI_TalonSRX(1));
    
    
    driveBaseDriveTrain.reset(new frc::DifferentialDrive(*driveBaseDriveTrainLeftTalon, *driveBaseDriveTrainRightTalon));
    lw->AddActuator("DriveBase", "Drive Train", driveBaseDriveTrain);
    driveBaseDriveTrain->SetSafetyEnabled(true);
        driveBaseDriveTrain->SetExpiration(0.1);
        driveBaseDriveTrain->SetMaxOutput(1.0);

    driveBaseGyro.reset(new frc::AnalogGyro(0));
    lw->AddSensor("DriveBase", "Gyro", driveBaseGyro);
    driveBaseGyro->SetSensitivity(0.007);
    driveBaseUltrasonicLeft.reset(new frc::AnalogInput(1));
    lw->AddSensor("DriveBase", "Ultrasonic Left", driveBaseUltrasonicLeft);
    
    driveBaseUltrasonicRight.reset(new frc::AnalogInput(2));
    lw->AddSensor("DriveBase", "Ultrasonic Right", driveBaseUltrasonicRight);
    
    elevatorElevatorTalon.reset(new WPI_TalonSRX(6));
    
    
    elbowElbowSpark.reset(new frc::Spark(1));
    lw->AddActuator("Elbow", "Elbow Spark", std::static_pointer_cast<frc::Spark>(elbowElbowSpark));
    
    elbowElbowTopLimit.reset(new frc::DigitalInput(0));
    lw->AddSensor("Elbow", "Elbow Top Limit", elbowElbowTopLimit);
    
    elbowElbowBottomLimit.reset(new frc::DigitalInput(1));
    lw->AddSensor("Elbow", "Elbow Bottom Limit", elbowElbowBottomLimit);
    
    grabberGrabberSolenoid.reset(new frc::DoubleSolenoid(0, 1, 2));
    lw->AddActuator("Grabber", "Grabber Solenoid", grabberGrabberSolenoid);
    
    shifterShifterSolenoid.reset(new frc::DoubleSolenoid(0, 0, 3));
    lw->AddActuator("Shifter", "Shifter Solenoid", shifterShifterSolenoid);
    
    climberClimberSpark.reset(new frc::Spark(2));
    lw->AddActuator("Climber", "Climber Spark", std::static_pointer_cast<frc::Spark>(climberClimberSpark));
    
    elBrakeElBrakeSolenoid.reset(new frc::DoubleSolenoid(0, 4, 5));
    lw->AddActuator("ElBrake", "ElBrake Solenoid", elBrakeElBrakeSolenoid);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   driveBaseDriveTrainLeftTalonSlave.reset(new WPI_TalonSRX(10));
   driveBaseDriveTrainRightTalonSlave.reset(new WPI_TalonSRX(11));
   AHRS *ahrs;
}
