// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

std::shared_ptr<DriveBase> Robot::driveBase;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Elbow> Robot::elbow;
std::shared_ptr<Grabber> Robot::grabber;
std::shared_ptr<Shifter> Robot::shifter;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<ElBrake> Robot::elBrake;
std::unique_ptr<OI> Robot::oi;


void Robot::RobotInit() {
	RobotMap::init();
    driveBase.reset(new DriveBase());
    elevator.reset(new Elevator());
    elbow.reset(new Elbow());
    grabber.reset(new Grabber());
    shifter.reset(new Shifter());
    climber.reset(new Climber());
    elBrake.reset(new ElBrake());

 	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser

	chooser.AddObject("AutoRoutine1", new AutoRoutine1());
	//chooser.AddObject("AutoPos1LL", new AutoPos1LL());

	chooser.AddDefault("Autonomous Command", new AutonomousCommand());

	frc::SmartDashboard::PutData("Auto Modes", &chooser);
	Robot::elevator->SetElPositionToZero(); //Set elevator starting position to 0

	CameraServer::GetInstance()->StartAutomaticCapture();

	}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	//Robot::elevator->SetElPositionToZero(); //Set elevator starting position to 0
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	/* poll the Drivers Station to attempt to determine the plate assignment
	 *
	 * The position of each element will be a L (for left) or R (for right)
	 * as we are looking out from our drivers area at the field
	 *
	 * Our alliance switch orientation (closest to us) will be accessible as gameData[0]
	 * The scale in the middle is accessible as gameData[1]
	 * The other alliance switch orientation will be accessible as gameData[2]
	 *
	 * */








}

void Robot::AutonomousInit() {
	//autonomousCommand = chooser.GetSelected();
	//autonomousCommand = new AutoPos1LL();

	std::string gameData; // 3 digit array LRL, LLL, RRR, RLR determining switch locations
	std::string allianceColor; //kRed, kBlue or kInvalid
	int startLocation; // 1, 2 or 3 (0 for invalid)

	startLocation = (frc::DriverStation::GetInstance().GetLocation() > 0) ? frc::DriverStation::GetInstance().GetLocation() : 0;
	allianceColor = frc::DriverStation::GetInstance().GetAlliance();
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	if (startLocation == 1){
		if(gameData.length() > 0){
			if(gameData[0] == 'L'){
				autonomousCommand = new AutoPos1LL();
			}
			else{
				if (gameData[1] == 'L'){
					autonomousCommand = new AutoPos1RL();
				}
				else {
					autonomousCommand = new AutoPos1RR();
				}
			}
		}
	}
	else if (startLocation == 2){
			if(gameData.length() > 0){
				if(gameData[0] == 'L'){
					autonomousCommand = new AutoPos2L2();
				}
				else {
					autonomousCommand = new AutoPos2R2();
				}
			}
	}
	else if (startLocation == 3){
		//autonomousCommand = new AutoPos3();
	}
	else {
		//We don't know nothin = We can either do nothin, or do somethin
	}

	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}




START_ROBOT_CLASS(Robot);

