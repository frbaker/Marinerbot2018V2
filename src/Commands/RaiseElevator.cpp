// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RaiseElevator.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

RaiseElevator::RaiseElevator(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void RaiseElevator::Initialize() {
	SetTimeout(2);
}

// Called repeatedly when this Command is scheduled to run
void RaiseElevator::Execute() {
	Robot::elBrake->BrakeOff();
	int topElevatorLimit = 3600;
	int bottomElevatorLimit = -3;

	if (Robot::elevator->GetElPosition() > topElevatorLimit){
		End();
		//joyVal = 0; // can't go up any higher
	}
	/*else if (Robot::elevator->GetElPosition() < bottomElevatorLimit){
		End();
		//joyVal = 0; // can't go up any lower (this may stop from smashing down)
	}*/
	else{
		Robot::elevator->TakeJoy(0.75); //limiting the speed to 45% of joy value
	}
	End();
}

// Make this return true when this Command no longer needs to run execute()
bool RaiseElevator::IsFinished() {
    return IsTimedOut();
}

// Called once after isFinished returns true
void RaiseElevator::End() {
	Robot::elBrake->BrakeOn();
	Robot::elevator->ElevatorStop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RaiseElevator::Interrupted() {
	End();
}
