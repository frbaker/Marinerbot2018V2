// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ElbowJoyControl.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ElbowJoyControl::ElbowJoyControl(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elbow.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ElbowJoyControl::Initialize() {
	SetTimeout(.03);
}

// Called repeatedly when this Command is scheduled to run
void ElbowJoyControl::Execute() {
	//Robot::driveBase->JoyDrive(Robot::oi->getJoystick()->GetRawAxis(1), Robot::oi->getJoystick()->GetRawAxis(5));
	double joyVal = Robot::oi->getJoystick2()->GetRawAxis(5);


	if (joyVal >.1 || joyVal < -.1){ //deadzone
		Robot::elbow->TakeJoy(joyVal*.45);
	}
	else {
		End();
	}



/*
	// Top Elbow Speed Joy Limit

if (Robot::oi->getJoystick2()->GetRawAxis(5)>.50) {
	Robot::elbow->TakeJoy(.50);
}
else {
	Robot::elbow->TakeJoy(Robot::oi->getJoystick2()->GetRawAxis(5));
}
//Top Elbow Speed Joy Limit

//Bottom Elbow Speed Joy Limit
if (Robot::oi->getJoystick2()->GetRawAxis(5)<0.01) {
	Robot::elbow->TakeJoy(0.01); //test
}
else {
	Robot::elbow->TakeJoy(Robot::oi->getJoystick2()->GetRawAxis(5));
}

//Bottom Elbow Speed Joy Limit
*/
}

// Make this return true when this Command no longer needs to run execute()
bool ElbowJoyControl::IsFinished() {
	/*if (Robot::oi->getJoystick2()->GetRawButton(6) ){
		return true;
	}*/
    return IsTimedOut();
}

// Called once after isFinished returns true
void ElbowJoyControl::End() {
	Robot::elbow->ElbowStop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ElbowJoyControl::Interrupted() {
	End();
}
