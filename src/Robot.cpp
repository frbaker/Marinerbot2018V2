// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

std::shared_ptr<DriveBase> Robot::driveBase;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Elbow> Robot::elbow;
std::shared_ptr<Grabber> Robot::grabber;
std::shared_ptr<Shifter> Robot::shifter;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<ElBrake> Robot::elBrake;
std::unique_ptr<OI> Robot::oi;


void Robot::RobotInit() {
	RobotMap::init();
    driveBase.reset(new DriveBase());
    elevator.reset(new Elevator());
    elbow.reset(new Elbow());
    grabber.reset(new Grabber());
    shifter.reset(new Shifter());
    climber.reset(new Climber());
    elBrake.reset(new ElBrake());

 	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser

	chooser.AddObject("AutoRoutine1", new AutoRoutine1());

	chooser.AddDefault("Autonomous Command", new AutonomousCommand());

	frc::SmartDashboard::PutData("Auto Modes", &chooser);
	Robot::elevator->SetElPositionToZero(); //Set elevator starting position to 0

	CameraServer::GetInstance()->StartAutomaticCapture();

	}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	//Robot::elevator->SetElPositionToZero(); //Set elevator starting position to 0
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	/* poll the Drivers Station to attempt to determine the plate assignment
	 *
	 * The position of each element will be a L (for left) or R (for right)
	 * as we are looking out from our drivers area at the field
	 *
	 * Our alliance switch orientation (closest to us) will be accessible as gameData[0]
	 * The scale in the middle is accessible as gameData[1]
	 * The other alliance switch orientation will be accessible as gameData[2]
	 *
	 * */
	std::string gameData; // 3 digit array LRL, LLL, RRR, RLR determining switch locations
	std::string allianceColor; //kRed, kBlue or kInvalid
	int startLocation; // 1, 2 or 3 (0 for invalid)

	startLocation = (frc::DriverStation::GetInstance().GetLocation() > 0) ? frc::DriverStation::GetInstance().GetLocation() : 0;
	allianceColor = frc::DriverStation::GetInstance().GetAlliance();
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	//The auto line is 120" from the start wall

	//The switch is 48 and center of the switch is 168 from the start wall so...
	//The near edge of the switch is 144 from the start wall
	//The far edge of the switch is 192 from the start wall

	//The field is 648 long with the 48 wide scale centered within
	//The center of the scale is 324 from the start wall
	//The near edge of the scale is 300 from the start wall
	//The far edge of the scale is 348 from the start wall

	//The field is 324 wide (162 half way point)


	//The robot is about 33 long (so center of robot is aprox 16.5)
	// and 28 wide (so center aprox 14)


	//The switch is 85.25 to 121.25 from the side walls
	//The scale is 71.57 to 107.57 from the side walls (plate center is 89.57)

	//Position 1 is to the left as you are facing the field, with the Robot
	//Placed facing straight forward with the left edge of the Robot aligned
	//Where the start wall has an angle

	if (startLocation == 1){
		if(gameData.length() > 0){
			if(gameData[0] == 'L'){
				//if (gameData[1] == 'L'){ // we don't care where the scale is, go for the switch
					//we are in position 1
					//our switch and the scale are on the left

					//to place on our switch, drive forward so the center of our
					//robot is centered on the switch
					//Drive Forward 151.5"

					//turn 90 degrees to the right

					//Raise Elevator

					//after turning our front edge should be about 60.18 from the wall
					//Drive forward 25"

					//Open Claw

					//Raise Elbow

					// Back Up 12"

				/*}
				else{
					//we are in position 1
					//our switch is on the left and the scale is on the right
				}*/
			}
			else{
				if (gameData[1] == 'L'){ //Lets go for the scale
					//we are in position 1
					//our switch is on the right and the scale is on the left

					//to place on our scale, drive forward so the center of our
					//robot is between the switch and the scale
					//196-16.5+13+33 = 225.5 + 82
					//Drive Forward 225.5

					//turn 90 degrees to the right

					//Drive forward 82

					//turn 90 degrees to the left

					//Drive forward 82

					//Raise Elevator

					//after turning our front edge should be about 60.18 from the wall
					//Drive forward 11.39

					//Open Claw

					//Raise Elbow

					// Back Up 12"
				}
				else{
					//we are in position 1
					//The switch and the scale are on the right

					//Lets go for the scale
					//to place on our scale, drive forward so the center of our
					//robot is centered between the switch and the scale
					//196-16.5+13+33 = 225.5 + 82
					//Drive Forward 225.5

					//turn 90 degrees to the right

					//Drive forward 154.62

					//turn 90 degrees to the left

					//Drive forward 82

					//Raise Elevator

					//after turning our front edge should be about 60.18 from the wall
					//Drive forward 11.39

					//Open Claw

					//Raise Elbow

					// Back Up 12"


				}
			}
		}

	}
	else if (startLocation == 2){
		if(gameData.length() > 0){
			if(gameData[0] == 'L'){
				if (gameData[1] == 'L'){
					//we are in position 2
					//our switch and the scale are on the left
				}
				else{
					//we are in position 2
					//our switch is on the left and the scale is on the right
				}
			}
			else{
				if (gameData[1] == 'L'){
					//we are in position 2
					//our switch is on the right and the scale is on the left
				}
				else{
					//we are in position 2
					//The switch and the scale are on the right
				}
			}
		}
	}
	else if (startLocation == 3){
		if(gameData.length() > 0){
			if(gameData[0] == 'L'){
				if (gameData[1] == 'L'){
					//we are in position 3
					//our switch and the scale are on the left
				}
				else{
					//we are in position 3
					//our switch is on the left and the scale is on the right
				}
			}
			else{
				if (gameData[1] == 'L'){
					//we are in position 3
					//our switch is on the right and the scale is on the left
				}
				else{
					//we are in position 3
					//The switch and the scale are on the right
				}
			}
		}
	}
	else {
		//We don't know nothin = We can either do nothin, or do somethin
	}




}

void Robot::AutonomousInit() {
	//Robot::elevator->SetElPositionToZero(); //Set elevator starting position to 0
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}




START_ROBOT_CLASS(Robot);

